# -*- coding: utf-8 -*-
"""task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FW7Tvl5Zdj-ij_NNELlwO-fJ0R-rAilU
"""

#task3
from collections import defaultdict
input_data = open("input3.txt", "r")
output_data = open("output3.txt","w")
n, m = map(int, input_data.readline().split())

def buildgraph(edges):
  graph = defaultdict(list)
  for u,v in edges:
    graph[u].append(v)
  return graph

def buildtranspose(edges):
  transpose = defaultdict(list)
  for u,v in edges:
    transpose[v].append(u)
  return transpose

def dfs(graph,node,visited,stack):
  visited[node] = True
  for nrbgh in graph[node]:
    if not visited[nrbgh]:
      dfs(graph,nrbgh,visited,stack)
  stack.append(node)

def find_scc_s(graph,node,visited,component):
  visited[node] = True
  component.append(node)
  for nrbgh in graph[node]:
    if not visited[nrbgh]:
      find_scc_s(graph,nrbgh,visited,component)

def strongly_connected_components_show(n,edges):
  graph = buildgraph(edges)
  visited = [False]*(n+1)
  stack = []
  for i in range(1,n+1):
    if not visited[i]:
      dfs(graph,i,visited,stack)
  trans = buildtranspose(edges)
  visited = [False]*(n+1)
  scc_s = []

  while stack:
    node = stack.pop()
    if not visited[node]:
      component = []
      find_scc_s(trans,node,visited,component)
      scc_s.append(component)
  return scc_s

edges = [tuple(map(int, input_data.readline().split())) for i in range(m)]
scc_s = strongly_connected_components_show(n,edges)
for component in scc_s:
  print(*component, file = output_data)

output_data.close()