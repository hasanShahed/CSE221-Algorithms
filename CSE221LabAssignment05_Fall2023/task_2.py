# -*- coding: utf-8 -*-
"""task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FW7Tvl5Zdj-ij_NNELlwO-fJ0R-rAilU
"""

#task2
from collections import defaultdict, deque

input_data = open("input2.txt", "r")
output_data = open("output2.txt","w")
N, M = map(int, input_data.readline().split())
prereq= [tuple(map(int,input_data.readline().split())) for i in range(M)]

def dfs(course, graph, visited, stack, path):
  visited[course] = True
  path.add(course)

  for neighbor in graph[course]:
    if neighbor in path:
      return False
    if not visited[neighbor]:
      if not dfs(neighbor, graph, visited, stack, path):
        return False

  stack.appendleft(course)
  path.remove(course)
  return True

def find_new_order(N, prereq):
  graph = defaultdict(list)

  for A, B in prereq:
    graph[A].append(B)
  visited = {course: False for course in range(1, N + 1)}
  stack = deque()
  for course in range(1, N + 1):
    if not visited[course]:
      if not dfs(course, graph, visited, stack, set()):
        return "IMPOSSIBLE"
  return stack

output_value =find_new_order(N, prereq)
if type(output_value) == deque:
    output_data.write(' '.join(map(str, output_value)))
else:
    output_data.write(output_value)

output_data.close()